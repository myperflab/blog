<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go Lang on myPerfLab</title>
    <link>http://localhost:38427/tags/go-lang/</link>
    <description>Recent content in Go Lang on myPerfLab</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 09 Dec 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:38427/tags/go-lang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go Code Profiling Guide with Examples</title>
      <link>http://localhost:38427/posts/go_lang_profiling/</link>
      <pubDate>Mon, 09 Dec 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:38427/posts/go_lang_profiling/</guid>
      <description>A perf engineer&amp;rsquo;s best companions are profiling tools which can help them to reveal the bottlenecs of the application. There are a variety of the tools\libs are available. In this write-up we will discuss about how golang libs\tools can be used and how much effective + powerfull they are at capturing the profiles of the code\application which can be used for analysis to identify the bottlenecks.&#xA;Go Provides built-in tools for profiling CPU, memory, goroutines, and more through the pprof and runtime packages.</description>
    </item>
  </channel>
</rss>
